swagger: '2.0'
info:
  description: This is a simple API for JADE
  version: 1.0.0
  title: Simple JADE API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: packages
  description: packages for weddings available
- name: services
  description: services for events
- name: providers
  description: service providers recommended
- name: certifications
  description: JADE certifications
- name: weddings
  description: planned weddings
  
paths:
  /packages:
    # defines a controller for the path
    x-swagger-router-controller: packages
    get:
      tags:
      - packages
      summary: packages for weddings available
      # OperationId is the function inside the controller
      operationId: searchPackage
      description: packages available for sale
      produces:
      - application/json
      parameters:
      - in: query
        name: searchPackage
        description: pass an optional search string for looking up inventory
        required: false
        type: string
      responses:
        200:
          description: packages found by search
          schema:
            type: array
            items:
              $ref: '#/definitions/Package'
        400:
          description: bad input parameter
    post:
      tags:
      - packages
      summary: Create new wedding package
      operationId: createPackage
      description: Create new wedding package
      consumes: 
        - application/json
      parameters:
        - in: body
          name: package
          description: Package to create
          schema:
            $ref: '#/definitions/Package'
      responses:
        200:
          description: Success creating package
  /packages/{idPackage}:
    get:
      tags:
      - packages
      summary: Wedding packages available
      operationId: searchPackageById
      description: packages available for sale
      produces:
      - application/json
      parameters:
        - name: idPackage
          in: path
          description: pass an optional search string for looking up inventory
          required: true
          type: string
      responses:
        200:
          description: package found by search
          schema:
            type: array
            items:
              $ref: '#/definitions/Package'
        400:
          description: bad input parameter
    put:
      tags:
      - packages
      summary: Update package properties
      operationId: updatePackage
      description: Update any package value
      produces:
      - application/json
      parameters:
      - in: path
        name: idPackage
        description: Package ID to update
        required: true
        type: string
      responses:
        200:
          description: Success updating package
          schema:
            type: object
            items:
              $ref: '#/definitions/Package'
    delete:
      tags:
        - packages
      summary: Delete a package
      description: Delete a wedding package
      operationId: deletePackage
      produces: 
      - application/json
      parameters: 
        - name: idPackage
          in: pathPackage ID to delete
          required: true
          type: integer
          format: int64
      responses:
        400:
          description: Bad input
        404:
          description: Package not found.
  /packages/{idPackage}/services:
    get:
      tags: 
      - packages
      summary: Gets services from a package.
      description: Services list of a package.
      operationId: searchServiceByPackage
      produces: 
      - application/json
      parameters: 
        - name: idPackage
          in: path
          description: Package ID for services search.
          required: true
          type: string
      responses:
        200:
          description: OK
        400:
          description: Bad input
        404:
          description: Package not found.
  /packages/{idPackage}/services/{idService}:
    get:
      tags: 
      - packages
      summary: gets a service from the package.
      description: gets a service from the package.
      operationId: getServiceInPackage
      produces: 
      - application/json
      parameters: 
        - name: idPackage
          in: path
          description: ID of the Package to get the service.
          required: true
          type: string
        - name: idService
          in: path
          description: ID of the service to get.
          required: true
          type: string
      responses:
        200:
          description: OK
        400:
          description: Bad input
        404:
          description: Package/Service not found.
    put:
      tags: 
      - packages
      summary: Adds/Updates a service to the package.
      description: Adds/Updates a service to the package.
      operationId: serviceInPackage
      produces: 
      - application/json
      parameters: 
        - name: idPackage
          in: path
          description: ID of the Package to add/update the service.
          required: true
          type: string
        - name: idService
          in: path
          description: ID of the service to add/update.
          required: true
          type: string
      responses:
        200:
          description: OK
        400:
          description: Bad input
        404:
          description: Package/Service not found.
    delete:
      tags: 
      - packages
      summary: deletes a service from a package.
      description: deletes a service from a package.
      operationId: deleteServiceFromPackage
      produces: 
      - application/json
      parameters: 
        - name: idPackage
          in: path
          description: ID of the package to delete the service from.
          required: true
          type: string
        - name: idService
          in: path
          description: ID of the service to delete from the package.
          required: true
          type: string
      responses:
        200:
          description: OK
        400:
          description: Bad input
        404:
          description: Package/Service not found.
  /services:
    get:
      tags:
      - services
      summary: List of available services
      operationId: searchService
      description: Services available to add to packages
      produces:
      - application/json
      parameters:
        - name: idService
          in: path
          description: ID of the service to search
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
        400:
          description: bad input parameter.
        404:
          description: Service not found.
    post:
      tags:
      - services
      summary: Adds new service
      operationId: createService
      description: Creates new available service
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: service
        description: Service to create
        required: true
        schema:
          $ref: '#/definitions/Service'
      responses:
        200:
          description: Service created OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
        400:
          description: Invalid input
  /services/{idService}:
    get:
      tags:
      - service
      summary: gets the service with the idService
      operationId: searchServiceById
      description: gets the service with the idService
      produces:
      - application/json
      parameters:
        - name: idService
          in: path
          description: Service id to do the search
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
        400:
          description: bad input parameter
        404:
          description: Service not found.
    put:
      tags:
      - service
      summary: Updates a service
      operationId: updateService
      description: Updates a service according to it's ID
      produces:
      - application/json
      parameters:
      - in: path
        name: idService
        description: Service to update
        required: true
        type: string
      responses:
        200:
          description: Service updated OK
          schema:
            type: object
            items:
              $ref: '#/definitions/Service'
    delete:
        tags:
        - service
        summary: Deletes available service
        description: Deletes available service
        operationId: deleteService
        produces:
        - application/json
        parameters:
        - name: idService
          in: path
          description: Service's ID to delete the service
          required: true
          type: string
        responses:
          200:
            description: Service deleted
          400:
            description: invalid input
          404:
            description: Service not found
  /providers:
    get:
      tags:
      - providers
      summary: List of available providers
      operationId: searchProvider
      description: Weddings providers available
      produces:
      - application/json
      parameters:
        - name: idProvider
          in: query
          description: provider id to search
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Provider'
        400:
          description: bad input parameter
    post:
      tags:
      - providers
      summary: Adds new provider
      operationId: addProvider
      description: Adds new provider
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: provider
        description: provider to create
        required: true
        schema:
          $ref: '#/definitions/Provider'
      responses:
        200:
          description: Provider created
          schema:
            type: array
            items:
              $ref: '#/definitions/Provider'
        405:
          description: Invalid input
  /providers/{idProvider}:
    get:
      tags:
      - provider
      summary: gets a provider by ID
      operationId: getProviderById
      description: gets a provider by ID
      produces:
      - application/json
      parameters:
        - name: idProvider
          in: path
          description: provider's ID to get the provider
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Provider'
        400:
          description: bad input parameter
    put:
      tags:
      - provider
      summary: Updates provider by ID
      operationId: updateProvider
      description: Updates provider by ID
      produces:
      - application/json
      parameters:
      - in: path
        name: idProvider
        #TODO: finish changing everything to English
        description: Proveedor buscado
        required: true
        type: string
      responses:
        200:
          description: Proveedor actualizado correctamente
          schema:
            type: object
            items:
              $ref: '#/definitions/Proveedor'
    delete:
        tags:
        - providers
        summary: Elimina un proveedor
        description: Elimina un proveedor
        operationId: deleteProveedor
        produces:
        - application/json
        parameters:
        - name: idProvider
          in: path
          description: El Id del proveedor a eliminar
          required: true
          type: string
        responses:
          400:
            description: Proveedor invalido
          404:
            description: Proveedor no encontrado
  /providers/{idProvider}/services:
    get:
      tags: 
      - providers
      summary: Obtiene la lista de services de un proveedor.
      description: Lista de services de un proveedor.
      operationId: buscarServicioProveedor
      produces: 
      - application/json
      parameters: 
        - name: idProvider
          in: path
          description: Identificación del proveedor al cual se le desean listar sus services
          required: true
          type: string
      responses:
        200:
          description: OK
  /providers/{idProvider}/services/{idService}:
    put:
      tags: 
      - providers
      summary: Agrega services al proveedor.
      description: Agrega services al proveedor.
      operationId: adicionarServicioProveedor
      produces: 
      - application/json
      parameters: 
        - name: idProvider
          in: path
          description: Identificación del proveedor al que se le desea agregar el servicio.
          required: true
          type: string
        - name: idService
          in: path
          description: Identificación del servicio que se desea agregar.
          required: true
          type: string
      responses:
        200:
          description: OK
    delete:
      tags: 
      - providers
      summary: Elimina un servicio de un paquete.
      description: Elimina un servicio de un paquete.
      operationId: deleteServicioDeProveedor
      produces: 
      - application/json
      parameters: 
        - name: idProvider
          in: path
          description: Identificación del proveedor al que se le desea agregar el servicio.
          required: true
          type: string
        - name: idService
          in: path
          description: Identificación del servicio que se desea agregar.
          required: true
          type: string
      responses:
        200:
          description: OK
  /certifications:
    get:
      tags:
      - certifications
      summary: Listado de certifications obtenidas por Jade
      operationId: listarcertifications
      description: Lista las certifications obtenidas por la Jade
      produces:
      - application/json
      parameters:
        - name: q
          in: query
          description: Texto para filtrar por nombres de certifications
          required: false
          type: string
      responses:
        200:
          description: Operacion correcta
          schema:
            type: array
            items:
              $ref: '#/definitions/Certificacion'
        400:
          description: bad input parameter
    post:
      tags:
      - certifications
      summary: Crea una nueva Certificación
      operationId: crearCertificacion
      description: Crea una nueva Certificación
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: certificacion
        description: Objeto Certificacion
        required: true
        schema:
          $ref: '#/definitions/Certificacion'
      responses:
        201:
          description: Created
        405:
          description: Invalid input
  /certifications/{idCertificacion}:
    get:
      tags:
      - certifications
      summary: Devuelve el detalle de una Certificación
      operationId: obtenerCertificacionPorId
      description: Devuelve el detalle de una Certificación por ID
      produces:
      - application/json
      parameters:
        - name: idCertificacion
          in: path
          description: ID de la Certificación a buscar
          required: true
          type: string
      responses:
        200:
          description: Operacion correcta
          schema:
            type: object
            items:
              $ref: '#/definitions/Certificacion'
        400:
          description: bad input parameter
    put:
      tags:
      - certifications
      summary: Actualiza una Certificación por ID
      operationId: actualizarCertificacionPorId
      description: Actualiza una Certificación por ID
      produces:
      - application/json
      parameters:
      - in: path
        name: idCertificacion
        description: ID de la Certificación a editar
        required: true
        type: string
      responses:
        200:
          description: Certificación actualizada correctamente
          schema:
            type: object
            items:
              $ref: '#/definitions/Certificacion'
    delete:
        tags:
        - certifications
        summary: Elimina una Certificación
        description: Elimina una Certificación
        operationId: deleteCertificacionPorId
        produces:
        - application/json
        parameters:
        - name: idCertificacion
          in: path
          description: ID de la Certificación a eliminar
          required: true
          type: string
        responses:
          400:
            description: Petición inválida
          404:
            description: Certificación no encontrada
  /weddings:
    get:
      tags:
      - weddings
      summary: weddings registradas en el sistema
      operationId: buscarBoda
      description: weddings registradas disponibles
      produces: 
      - application/json
      parameters:
      - in: query
        name: filtroweddings
        description: filtro a aplicar para buscar weddings específicas
        required: false
        type: string
      responses:
        200:
          description: weddings encontradas
          schema:
            type: array
            items: 
              $ref: '#/definitions/Boda'
    post:
      tags:
      - weddings
      summary: Crea una nueva boda
      operationId: crearBoda
      description: Crea una nueva boda
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: boda
        description: Objeto Boda
        required: true
        schema:
          $ref: '#/definitions/Boda'
      responses:
        201:
          description: Created
        405:
          description: Invalid input
  /weddings/{idBoda}:
    get:
      tags:
      - weddings
      summary: boda específica registrada
      operationId: obtenerBoda
      description: boda específica registrada
      produces:
      - application/json
      parameters:
      - in: path
        name: idBoda
        description: id de la boda a actualizar
        required: true
        type: string
      responses:
        200:
          description: boda actualizada correctamente
          schema:
            type: object
            items:
              $ref: '#/definitions/Boda'
    put:
      tags:
      - weddings
      summary: actualizar services de la boda
      operationId: actualizarBoda
      description: actualizar los services de una boda
      produces:
      - application/json
      parameters:
      - in: path
        name: idBoda
        description: id de la boda a actualizar
        required: true
        type: string
      - in: body
        name: servicesToUpdate
        description: services a añadir
        required: true
        schema:
          $ref: '#/definitions/Servicio'
      responses:
        200:
          description: boda actualizada correctamente
          schema:
            type: object
            items:
              $ref: '#/definitions/Boda'
    delete:
      tags:
        - weddings
      summary: Borra una boda
      description: Elimina una boda
      operationId: deleteBoda
      produces: 
      - application/json
      parameters: 
        - name: idBoda
          in: path
          description: Id de la boda a eliminar
          required: true
          type: string
      responses:
        400:
          description: In incorrecto
        404:
          description: Boda no encontrada    
definitions:
  Paquete:
    type: object
    required:
    - id
    - nombre
    - precio
    - services
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      nombre:
        type: string
        example: Bronze
      precio:
        type: integer
        example : 35000
      services:
        type: array
        items: 
          $ref: '#/definitions/Servicio'
  Servicio:
    required:
    - id
    - name
    - precio
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Flores
      precio:
        type: integer
        example: 2000
  Boda:
    required:
    - id
    - services
    - paquete
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      services:
        type: array
        items:
          $ref: '#/definitions/Servicio'
      paquete:
        type: object
        items:
          $ref: '#/definitions/Paquete'
  Proveedor:
    required:
    - id
    - nombre
    - telefono
    properties:
      id:
        type: string
        example: 619619
      nombre:
        type: string
        example: Flores
      telefono:
        type: string
        example: 310-322 54 41
      services:
        type: array
        items: 
          $ref: '#/definitions/Servicio'
  Certificacion:
    required:
    - id
    - name
    - date
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Oscar
      date:
        type: string
        example: 12/05/1988
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /jelopezta/Jade_Customized_Events/1.0.0
schemes:
 - https